#!/usr/bin/env python3
"""
üß™ HIZLI MODEL TESƒ∞
=================
Yeni eƒüitilmi≈ü modeli hƒ±zlƒ±ca test edelim
"""

import cv2
import os
import time
from ultralytics import YOLO
from datetime import datetime

def quick_model_test():
    print("üß™ HIZLI MODEL TEST BA≈ûLIYOR")
    print("="*50)
    
    # Video ve model yollarƒ±
    video_path = "0_DATA/Havuz_S23_Ultra.mp4"  # Test videosu
    new_model = "drowning_detection_v12_working.pt"  # YENƒ∞ MODEL (VAST backup)
    old_model = "4_MODELS/yolov8x.pt"  # ESKƒ∞ MODEL
    
    # Videoyu kontrol et
    if not os.path.exists(video_path):
        print(f"‚ùå Video bulunamadƒ±: {video_path}")
        return
    
    if not os.path.exists(new_model):
        print(f"‚ùå Yeni model bulunamadƒ±: {new_model}")
        return
    
    print(f"üìπ Video: {video_path}")
    print(f"üÜï Yeni Model: {new_model}")
    print(f"üîÑ Eski Model: {old_model}")
    print()
    
    # Video a√ß
    cap = cv2.VideoCapture(video_path)
    if not cap.isOpened():
        print("‚ùå Video a√ßƒ±lamadƒ±!")
        return
    
    # Video √∂zellikleri
    width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    fps = cap.get(cv2.CAP_PROP_FPS)
    
    print(f"üìä Video: {width}x{height} @ {fps:.1f} FPS")
    
    # YENƒ∞ MODEL TESƒ∞
    print("\nüÜï YENƒ∞ MODEL TESƒ∞ BA≈ûLIYOR...")
    test_model(cap, new_model, "YENƒ∞_MODEL", 60)  # 60 saniye = 2 dakika
    
    # Videoyu ba≈üa sar
    cap.set(cv2.CAP_PROP_POS_FRAMES, 0)
    
    # ESKƒ∞ MODEL TESƒ∞
    print("\nüîÑ ESKƒ∞ MODEL TESƒ∞ BA≈ûLIYOR...")
    test_model(cap, old_model, "ESKƒ∞_MODEL", 60)  # 60 saniye = 2 dakika
    
    cap.release()
    print("\n‚úÖ T√úM TESTLER TAMAMLANDI!")

def test_model(cap, model_path, model_name, duration_seconds):
    """Tek model testi"""
    try:
        # Model y√ºkle
        print(f"ü§ñ Model y√ºkleniyor: {model_path}")
        model = YOLO(model_path)
        
        # √áƒ±ktƒ± video
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_path = f"3_OUTPUT/TEST_{model_name}_{timestamp}.mp4"
        
        # Video writer
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        fps = cap.get(cv2.CAP_PROP_FPS)
        width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        
        out = cv2.VideoWriter(output_path, fourcc, fps, (width, height))
        
        # Test ba≈ülat
        start_time = time.time()
        frame_count = 0
        detection_count = 0
        
        print(f"‚è∞ {duration_seconds} saniye test ba≈ülatƒ±lƒ±yor...")
        
        while True:
            ret, frame = cap.read()
            if not ret:
                break
            
            elapsed = time.time() - start_time
            if elapsed >= duration_seconds:
                break
            
            frame_count += 1
            
            # YOLO tespiti
            results = model(frame, conf=0.3, classes=[0], verbose=False)  # Sadece person
            
            # Tespitleri √ßiz
            for r in results:
                boxes = r.boxes
                if boxes is not None:
                    for box in boxes:
                        detection_count += 1
                        x1, y1, x2, y2 = map(int, box.xyxy[0].tolist())
                        conf = float(box.conf.item())
                        
                        # Ye≈üil kutu √ßiz
                        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                        cv2.putText(frame, f"{conf:.2f}", (x1, y1-10), 
                                   cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)
            
            # Bilgi ekle
            progress = (elapsed / duration_seconds) * 100
            info_text = f"{model_name} | Frame: {frame_count} | Tespit: {len(boxes) if boxes is not None else 0} | %{progress:.1f}"
            cv2.putText(frame, info_text, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
            
            # Kaydet
            out.write(frame)
            
            # ƒ∞lerleme g√∂ster
            if frame_count % 30 == 0:  # Her saniye
                print(f"   ‚è±Ô∏è  {elapsed:.1f}s - {frame_count} kare - {detection_count} tespit")
        
        out.release()
        
        # Sonu√ßlarƒ± g√∂ster
        total_time = time.time() - start_time
        avg_fps = frame_count / total_time
        
        print(f"‚úÖ {model_name} TEST SONU√áLARI:")
        print(f"   ‚è±Ô∏è  S√ºre: {total_time:.1f} saniye")
        print(f"   üé¨ Kare: {frame_count}")
        print(f"   üéØ Tespit: {detection_count}")
        print(f"   üöÄ FPS: {avg_fps:.1f}")
        print(f"   üíæ Video: {output_path}")
        print()
        
    except Exception as e:
        print(f"‚ùå {model_name} test hatasƒ±: {e}")

if __name__ == "__main__":
    quick_model_test()
